name: Slack Webhook Notification
description: "Send messages to Slack using webhooks with rich formatting and error handling"

inputs:
  webhook_url:
    description: "Slack webhook URL (should be passed from secrets)"
    required: true
  message:
    description: "Message to display"
    required: false
    default: "Notification from GitHub Actions"
  title:
    description: "Title of the Slack message"
    required: false
    default: "GitHub Actions Notification"
  channel:
    description: "Slack channel to send the message to (optional, webhook default will be used if not specified)"
    required: false
    default: "not-gh-act"
  username:
    description: "Username to display in Slack"
    required: false
    default: "GitHub Actions Bot"
  icon_emoji:
    description: "Emoji icon to use in Slack"
    required: false
    default: ":rocket:"
  color:
    description: "Color for the message attachment (good, warning, danger, or hex color)"
    required: false
    default: "good"
  status:
    description: "Status of the build (success, failure, warning, info)"
    required: false
    default: "info"

runs:
  using: "composite"
  steps:
    - name: "Validate webhook URL"
      shell: bash
      run: |
        echo "🔍 Validating Slack webhook configuration..."

        if [ -z "${{ inputs.webhook_url }}" ]; then
          echo "❌ Error: webhook_url is required"
          exit 1
        fi

        if [[ ! "${{ inputs.webhook_url }}" =~ ^https://hooks.slack.com/services/ ]]; then
          echo "❌ Error: Invalid Slack webhook URL format"
          echo "Expected format: https://hooks.slack.com/services/..."
          exit 1
        fi

        echo "✅ Webhook URL validation passed"

    - name: "Prepare Slack message"
      shell: bash
      run: |
        echo "📝 Preparing Slack message..."

        # Check if jq is available, install if not
        if ! command -v jq &> /dev/null; then
          echo "📦 Installing jq..."
          sudo apt-get update -q && sudo apt-get install -y jq
        fi

        # Set color based on status
        case "${{ inputs.status }}" in
          "success") COLOR="good" ;;
          "failure") COLOR="danger" ;;
          "warning") COLOR="warning" ;;
          *) COLOR="${{ inputs.color }}" ;;
        esac

        # Set emoji based on status
        case "${{ inputs.status }}" in
          "success") EMOJI="✅" ;;
          "failure") EMOJI="❌" ;;
          "warning") EMOJI="⚠️" ;;
          *) EMOJI="ℹ️" ;;
        esac

        # Build JSON payload (matching official Slack webhook format)
        PAYLOAD=$(cat <<EOF
        {
          "channel": "${{ inputs.channel }}",
          "username": "${{ inputs.username }}",
          "icon_emoji": "${{ inputs.icon_emoji }}",
          "attachments": [
            {
              "fallback": "${{ inputs.title }}: ${{ inputs.message }}",
              "color": "${COLOR}",
              "pretext": "${EMOJI} GitHub Actions Notification",
              "author_name": "${{ github.actor }}",
              "author_link": "https://github.com/${{ github.actor }}",
              "author_icon": "https://github.com/${{ github.actor }}.png?size=32",
              "title": "${{ inputs.title }}",
              "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "text": "${{ inputs.message }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "<https://github.com/${{ github.repository }}|${{ github.repository }}>",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "\`${{ github.ref_name }}\`",
                  "short": true
                },
                {
                  "title": "Event",
                  "value": "${{ github.event_name }}",
                  "short": true
                },
                {
                  "title": "Status",
                  "value": "${{ inputs.status }}",
                  "short": true
                },
                {
                  "title": "Workflow",
                  "value": "${{ github.workflow }}",
                  "short": true
                },
                {
                  "title": "Run Number",
                  "value": "#${{ github.run_number }}",
                  "short": true
                }
              ],
              "footer": "GitHub Actions",
              "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        # Save payload to file
        echo "$PAYLOAD" > /tmp/slack_payload.json
        echo "✅ Message prepared successfully"
        echo "📋 Payload preview:"
        echo "$PAYLOAD" | head -10

    - name: "Send Slack notification"
      shell: bash
      run: |
        echo "🚀 Sending message to Slack..."        # Build the payload string with proper JSON formatting
        PAYLOAD_STRING=$(cat /tmp/slack_payload.json | jq -c .)

        echo "📋 Payload being sent (formatted):"
        echo "$PAYLOAD_STRING" | jq .

        # Method: Using --data-urlencode "payload=..." (matching your working example)
        HTTP_CODE=$(curl -s -w "%{http_code}" -o /tmp/slack_response.json \
          -X POST \
          --data-urlencode "payload=$PAYLOAD_STRING" \
          "${{ inputs.webhook_url }}")

        echo "HTTP Status Code: $HTTP_CODE"

        # Check response
        if [ "$HTTP_CODE" -eq 200 ]; then
          echo "✅ Message sent successfully to Slack"
          if [ -n "${{ inputs.channel }}" ]; then
            echo "📍 Channel: ${{ inputs.channel }}"
          fi
          echo "👤 Username: ${{ inputs.username }}"
          echo "📝 Message: ${{ inputs.message }}"
        else
          echo "❌ Failed to send message to Slack"
          echo "📋 Response details:"
          cat /tmp/slack_response.json
          echo ""
          echo "🔍 Debugging info:"
          echo "URL: ${{ inputs.webhook_url }}"
          echo "Payload size: $(echo "$PAYLOAD_STRING" | wc -c) bytes"

          # Try alternative method if first fails
          echo "🔄 Trying alternative method..."
          HTTP_CODE_ALT=$(curl -s -w "%{http_code}" -o /tmp/slack_response_alt.json \
            -X POST \
            -H "Content-Type: application/json" \
            -d @/tmp/slack_payload.json \
            "${{ inputs.webhook_url }}")

          echo "Alternative HTTP Status Code: $HTTP_CODE_ALT"
          if [ "$HTTP_CODE_ALT" -eq 200 ]; then
            echo "✅ Alternative method succeeded"
          else
            echo "❌ Both methods failed"
            cat /tmp/slack_response_alt.json
            exit 1
          fi
        fi

    - name: "Cleanup temporary files"
      shell: bash
      if: always()
      run: |
        echo "🧹 Cleaning up temporary files..."
        rm -f /tmp/slack_payload.json /tmp/slack_response.json
        echo "✅ Cleanup complete"
